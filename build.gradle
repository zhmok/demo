buildscript {
    ext {
        springCloudVersion='Greenwich.RELEASE'
        springBootVersion ='2.2.0.M1'
        springDataVersion ='Moore-M3'
    }
    repositories {
        maven { url 'https://maven.aliyun.com/repository/public' }
        maven { url 'https://mvnrepository.com/' }
        maven { url 'https://repo.spring.io/snapshot' }
        maven { url 'https://repo.spring.io/milestone' }
        maven { url 'https://repo.spring.io/libs-snapshot' }
        mavenLocal()
    }
    dependencies {
        classpath  "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
//        compile group: 'org.springframework.boot', name: 'spring-boot-gradle-plugin', version: '2.1.4.RELEASE', ext: 'pom'
    }
}

ext {
    javaVersion=1.8
    encoding='UTF-8'

    fastdfsClientVersion='1.27-SNAPSHOT'
    mysqlConnectionVersion='8.0.15'
    mybatisSpringBootVersion='1.3.2'
    jasyptSpring='2.1.1'
    swaggerVersion='3.0.0-SNAPSHOT'
//    swaggerVersion='2.9.2'
}


configure(allprojects) { project ->
    group = "com.zh.demo"
    version = version.replace("BUILD", "")
    
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    
    bootJar{p ->
//        print manifest.attributes[""] =
        if(project.name == "common" || project.name == "demo"){
            enabled = false
        }
    }
    
    dependencyManagement {
        imports {
//            mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
//            mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
            mavenBom("org.springframework.data:spring-data-releasetrain:${springDataVersion}")
        }
    }
    compileJava {
        sourceCompatibility = javaVersion
        targetCompatibility = javaVersion
        options.encoding = encoding
    }
    compileTestJava {
        sourceCompatibility = javaVersion
        targetCompatibility = javaVersion
        options.encoding = encoding
    }
    repositories {
        maven { url 'https://maven.aliyun.com/repository/public' }
        maven { url 'https://mvnrepository.com/' }
        maven { url 'https://repo.spring.io/snapshot' }
        maven { url 'https://repo.spring.io/milestone' }
        jcenter(){url 'http://oss.jfrog.org/artifactory/oss-snapshot-local/'}
        mavenLocal()
    }
    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-devtools'
        implementation "com.github.ulisesbocchio:jasypt-spring-boot:${jasyptSpring}"
        implementation "io.springfox:springfox-swagger2:${swaggerVersion}"
//        implementation "io.springfox:springfox-swagger-ui:${swaggerVersion}"
//        implementation "org.mybatis.spring.boot:mybatis-spring-boot-starter:${mybatisSpringBootVersion}"
//        implementation "mysql:mysql-connector-java:${mysqlConnectionVersion}"
        implementation ("io.springfox:springfox-spring-webflux:${swaggerVersion}"){
//            transitive = false
        }
        implementation "org.springframework.plugin:spring-plugin-core:1.2.0.RELEASE"

        // 远程仓库无法下载 需要手动安装依赖到本地
//        implementation "org.csource:fastdfs-client-java:${fastdfsClientVersion}"
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
//        testImplementation "org.springframework.cloud:spring-cloud-starter-netflix-eureka-client"
//        testImplementation "org.springframework.cloud:spring-cloud-starter-netflix-eureka-server"
//        testImplementation "org.springframework.cloud:spring-cloud-starter-gateway"
//        testImplementation "org.springframework.cloud:spring-cloud-starter-config"
//        testImplementation "org.springframework.cloud:spring-cloud-starter-netflix-hystrix"
//        testImplementation "org.springframework.cloud:spring-cloud-starter-netflix-ribbon"
//        testImplementation "org.springframework.cloud:spring-cloud-starter-openfeign"
//        testImplementation "org.springframework.cloud:spring-cloud-starter-bus-amqp"
//        testImplementation "org.springframework.cloud:spring-cloud-starter-bus-kafka"

        compileOnly'org.projectlombok:lombok'
        annotationProcessor'org.projectlombok:lombok'
//        implementation 'org.springframework.boot:spring-boot-starter-web'
//        implementation 'org.springframework.boot:spring-boot-starter-webflux'
//        implementation 'org.springframework.boot:spring-boot-starter-websocket'
//        implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
//        implementation 'org.springframework.boot:spring-boot-starter-amqp'

    }

}

//configure(subprojects){
//    subProject->
//        bootJar{p ->
//            manifest.from("")
////        print manifest.attributes[""] =
//            if(subProject.name == "common"){
//                enabled = false
//            }
//            manifest.attributes("")
//        }
//}

