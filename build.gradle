buildscript {
    ext {
        springCloudVersion = 'Greenwich.RELEASE'
        springBootVersion = '2.2.0.M1'
        springDataVersion = 'Moore-M3'
    }
    repositories {
        maven { url 'https://maven.aliyun.com/repository/public' }
        maven { url 'https://mvnrepository.com/' }
        maven { url 'https://repo.spring.io/snapshot' }
        maven { url 'https://repo.spring.io/milestone' }
        maven { url 'https://repo.spring.io/libs-snapshot' }
        mavenLocal()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
//        compile group: 'org.springframework.boot', name: 'spring-boot-gradle-plugin', version: '2.1.4.RELEASE', ext: 'pom'
    }
}

ext {
    javaVersion = 1.8
    encoding = 'UTF-8'

    fastdfsClientVersion = '1.27-SNAPSHOT'
    mysqlConnectionVersion = '8.0.15'
    mybatisSpringBootVersion = '1.3.2'
    jasyptSpring = '2.1.1'
//    swaggerVersion = '3.0.0-SNAPSHOT'
    swaggerVersion = '2.9.2'
}


configure(allprojects) { project ->
    group = "com.zh.demo"
    version = version.replace("BUILD.", "")

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    dependencyManagement {
        imports {
//            mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
            mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
            mavenBom("org.springframework.data:spring-data-releasetrain:${springDataVersion}")
        }

    }

    def commonCompilerArgs = ["-Xlint:serial", "-Xlint:cast", "-Xlint:classfile", "-Xlint:dep-ann",
                              "-Xlint:divzero", "-Xlint:empty", "-Xlint:finally", "-Xlint:overrides",
                              "-Xlint:path",/* "-Xlint:processing",*/ "-Xlint:static", "-Xlint:try", "-Xlint:-options"]
    
    compileJava.options*.compilerArgs = commonCompilerArgs +
            ["-Xlint:varargs", "-Xlint:fallthrough", "-Xlint:rawtypes",
             "-Xlint:deprecation", "-Xlint:unchecked", "-Werror"];
    
    compileTestJava.options*.compilerArgs = commonCompilerArgs +
            ["-Xlint:-varargs", "-Xlint:-fallthrough", "-Xlint:-rawtypes",
             "-Xlint:-deprecation", "-Xlint:-unchecked"];

    compileJava {
        sourceCompatibility = javaVersion
        targetCompatibility = javaVersion
        options.encoding = encoding
    }
    compileTestJava {
        sourceCompatibility = javaVersion
        targetCompatibility = javaVersion
        options.encoding = encoding
    }
    repositories {
        maven { url 'https://maven.aliyun.com/repository/public' }
        maven { url 'https://mvnrepository.com/' }
        maven { url 'https://repo.spring.io/snapshot' }
        maven { url 'https://repo.spring.io/milestone' }
        jcenter() { url 'http://oss.jfrog.org/artifactory/oss-snapshot-local/' }
        mavenLocal()
    }

    dependencies {
        testImplementation 'junit:junit'
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
//        implementation "org.springframework.plugin:spring-plugin-core:1.2.0.RELEASE"
        
//        implementation "io.springfox:springfox-swagger-ui:${swaggerVersion}"
//        implementation "org.mybatis.spring.boot:mybatis-spring-boot-starter:${mybatisSpringBootVersion}"
//        implementation "mysql:mysql-connector-java:${mysqlConnectionVersion}"
//        implementation ("io.springfox:springfox-spring-webflux:${swaggerVersion}")
//            transitive = false

        // 远程仓库无法下载 需要手动安装依赖到本地
//        implementation "org.csource:fastdfs-client-java:${fastdfsClientVersion}"


//        implementation 'org.springframework.boot:spring-boot-starter-web'
//        implementation 'org.springframework.boot:spring-boot-starter-webflux'
//        implementation 'org.springframework.boot:spring-boot-starter-websocket'
//        implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
//        implementation 'org.springframework.boot:spring-boot-starter-amqp'
//        testImplementation "org.springframework.cloud:spring-cloud-starter-netflix-eureka-client"
//        testImplementation "org.springframework.cloud:spring-cloud-starter-netflix-eureka-server"
//        testImplementation "org.springframework.cloud:spring-cloud-starter-gateway"
//        testImplementation "org.springframework.cloud:spring-cloud-starter-config"
//        testImplementation "org.springframework.cloud:spring-cloud-starter-netflix-hystrix"
//        testImplementation "org.springframework.cloud:spring-cloud-starter-netflix-ribbon"
//        testImplementation "org.springframework.cloud:spring-cloud-starter-openfeign"
//        testImplementation "org.springframework.cloud:spring-cloud-starter-bus-amqp"
//        testImplementation "org.springframework.cloud:spring-cloud-starter-bus-kafka"
//        testImplementation 'org.springframework.boot:spring-boot-starter-test'

    }

}

configure(subprojects) {
    subProject ->

        def isWeb = (subProject.name != 'common')

        if (!isWeb) {
            jar.enabled = true
            bootJar.enabled = false
        } else {
            bootJar.enabled = true
            jar.enabled = false
            compileTestJava.enabled = false
            processTestResources.enabled = false
            testClasses.enabled = false
            test.enabled = false
            check.enabled = false
        }
        dependencies {
            implementation 'org.springframework.boot:spring-boot-starter'
//            implementation 'org.springframework.boot:spring-boot-devtools'
//            implementation "com.github.ulisesbocchio:jasypt-spring-boot:${jasyptSpring}"
//            implementation "io.springfox:springfox-swagger2:${swaggerVersion}"
//            implementation "io.springfox:springfox-spring-web:${swaggerVersion}"
//            implementation "org.springframework.plugin:spring-plugin-core:1.2.0.RELEASE"
            if (isWeb) {
            implementation 'org.springframework.boot:spring-boot-starter'
            implementation 'org.springframework.boot:spring-boot-devtools'
            implementation "com.github.ulisesbocchio:jasypt-spring-boot:${jasyptSpring}"
            implementation "io.springfox:springfox-swagger2:${swaggerVersion}"
            implementation "io.springfox:springfox-spring-web:${swaggerVersion}"
            implementation "org.springframework.plugin:spring-plugin-core:1.2.0.RELEASE"
            }
        }
}

configure(rootProject) {
//    compileJava.enabled = false;
//    processResources.enabled = false;
//    classes.enabled = false;
    bootJar.enabled = false;
//    jar.enabled = false;
////    assemble.enabled = false;
//    compileTestJava.enabled = false;
//    processTestResources.enabled = false;
//    testClasses.enabled = false;
//    test.enabled = false;
//    check.enabled = false;
//    build.enabled = false;

}